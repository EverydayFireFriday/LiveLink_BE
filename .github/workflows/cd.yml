name: CD

on:
  push:
    branches: [main]
    tags:
      - 'v*.*.*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Generate deployment artifact
        run: |
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" > deployment-info.txt
          echo "SHA: ${{ github.sha }}" >> deployment-info.txt
          echo "Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> deployment-info.txt

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-info
          path: deployment-info.txt

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download deployment artifact
        uses: actions/download-artifact@v5
        with:
          name: deployment-info

      - name: Display deployment info
        run: cat deployment-info.txt

      - name: Create .env.production file from secrets
        run: |
          cat > .env.production << EOF
          # Application
          NODE_ENV=production
          PORT=3000
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}

          # Session and Cookie
          SESSION_SECRET=${{ secrets.SESSION_SECRET }}
          SESSION_MAX_AGE=86400000
          COOKIE_DOMAIN=${{ secrets.COOKIE_DOMAIN }}
          COOKIE_SAMESITE=${{ secrets.COOKIE_SAMESITE || 'lax' }}

          # Brute-force Protection
          BRUTE_FORCE_MAX_ATTEMPTS=10
          BRUTE_FORCE_BLOCK_DURATION=1800

          # MongoDB
          MONGO_URI=${{ secrets.MONGO_URI || 'mongodb://mongo:27017/livelink' }}

          # Redis
          REDIS_URL=${{ secrets.REDIS_URL || 'redis://redis:6379' }}

          # Email Service
          EMAIL_SERVICE=gmail
          EMAIL_USER=${{ secrets.EMAIL_USER }}
          EMAIL_PASS=${{ secrets.EMAIL_PASS }}

          # Admin Users
          ADMIN_EMAILS=${{ secrets.ADMIN_EMAILS }}

          # Logging
          LOG_LEVEL=info

          # Google OAuth
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}

          # Apple OAuth
          APPLE_CLIENT_ID=${{ secrets.APPLE_CLIENT_ID }}
          APPLE_TEAM_ID=${{ secrets.APPLE_TEAM_ID }}
          APPLE_KEY_ID=${{ secrets.APPLE_KEY_ID }}
          APPLE_PRIVATE_KEY=${{ secrets.APPLE_PRIVATE_KEY }}

          # API Rate Limiting
          API_LIMIT_DEFAULT_WINDOW_MS=60000
          API_LIMIT_DEFAULT_MAX=100
          API_LIMIT_STRICT_WINDOW_MS=60000
          API_LIMIT_STRICT_MAX=20
          API_LIMIT_RELAXED_WINDOW_MS=60000
          API_LIMIT_RELAXED_MAX=200

          # Grafana (optional)
          GRAFANA_ADMIN_USER=${{ secrets.GRAFANA_ADMIN_USER || 'admin' }}
          GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD || 'admin' }}
          EOF

      # 실제 배포 작업을 여기에 추가하세요
      # 예: SSH를 통한 서버 배포, Kubernetes 배포 등
      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.0.0
        if: false  # 활성화하려면 true로 변경
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            cd ${{ secrets.DEPLOY_PATH || '/opt/livelink' }}

            # .env.production 파일 업데이트
            echo "${{ secrets.ENV_PRODUCTION_FILE }}" > .env.production

            # Docker Compose로 전체 스택 재시작
            docker-compose pull
            docker-compose up -d

            # 헬스체크
            sleep 10
            curl -f http://localhost:3000/health/liveness || exit 1

            echo "✅ Deployment completed successfully"

      - name: Create deployment notification
        run: |
          echo "✅ Deployment completed successfully"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "Branch: ${{ github.ref_name }}"
