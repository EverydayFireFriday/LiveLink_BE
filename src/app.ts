import promClient from 'prom-client';

// Prometheus metrics setup
const register = new promClient.Registry();

// Collect default metrics (CPU, memory, event loop, etc.)
promClient.collectDefaultMetrics({
  register,
  prefix: 'nodejs_',
  gcDurationBuckets: [0.001, 0.01, 0.1, 1, 2, 5],
});

// HTTP Request Counter
const httpRequestCounter = new promClient.Counter({
  name: 'http_requests_total',
  help: 'Total number of HTTP requests',
  labelNames: ['method', 'route', 'status'],
  registers: [register],
});

// HTTP Request Duration Histogram
const httpRequestDurationMicroseconds = new promClient.Histogram({
  name: 'http_request_duration_seconds',
  help: 'Duration of HTTP requests in seconds',
  labelNames: ['method', 'route', 'status'],
  buckets: [0.1, 0.3, 0.5, 0.7, 1, 3, 5, 7, 10],
  registers: [register],
});

// Active Connections Gauge
const activeConnectionsGauge = new promClient.Gauge({
  name: 'http_active_connections',
  help: 'Number of active HTTP connections',
  registers: [register],
});

// Database Connection Status
const dbConnectionGauge = new promClient.Gauge({
  name: 'db_connection_status',
  help: 'Database connection status (1 = connected, 0 = disconnected)',
  labelNames: ['database'],
  registers: [register],
});

// Redis Connection Status
const redisConnectionGauge = new promClient.Gauge({
  name: 'redis_connection_status',
  help: 'Redis connection status (1 = connected, 0 = disconnected)',
  registers: [register],
});

// HTTP Error Counter
const httpErrorCounter = new promClient.Counter({
  name: 'http_errors_total',
  help: 'Total number of HTTP errors',
  labelNames: ['method', 'route', 'status'],
  registers: [register],
});
import express from 'express';
import session from 'express-session';
import passport from 'passport';
import { configurePassport } from './config/oauth/passport';
import dotenv from 'dotenv';
import cors from 'cors';
import helmet from 'helmet';
import morgan from 'morgan';
import mongoSanitize from 'express-mongo-sanitize';
import sanitizeHtml from 'sanitize-html';
import hpp from 'hpp';

// üîß ÌôòÍ≤ΩÎ≥ÄÏàò Î°úÎìú (Îß® Î®ºÏ†Ä!)
dotenv.config();

// ‚úÖ ÌôòÍ≤ΩÎ≥ÄÏàò Í≤ÄÏ¶ù Ïã§Ìñâ (Ï¶âÏãú Í≤ÄÏ¶ù Î∞è ÌîÑÎ°úÏÑ∏Ïä§ Ï¢ÖÎ£å)
import {
  env,
  isDevelopment,
  isProduction,
  shouldSkipAuth,
} from './config/env/env';

import logger, { stream } from './utils/logger/logger';
import { swaggerSpec, swaggerUi, swaggerUiOptions } from './config/swagger';
import { ChatSocketServer } from './socket';
import { initializeChatModels } from './models/chat';

// Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ Ìï®ÏàòÎì§
import {
  connectDatabase as connectUserDB,
  disconnectDatabase as disconnectUserDB,
} from './models/auth/user';
import {
  connectDB as connectConcertDB,
  initializeConcertModel,
} from './utils/database/db';
import { initializeAllArticleModels } from './models/article';
import { ReportService } from './report/reportService';
import { setupApolloServer } from './report/apolloServer';
import { ConcertStatusScheduler } from './services/concert/concertStatusScheduler';

// ÎùºÏö∞ÌÑ∞ import
import authRouter from './routes/auth/index';
import concertRouter from './routes/concert/index';
import healthRouter from './routes/health/healthRoutes';
import swaggerRouter from './routes/swagger/swaggerRoutes';
import termsRouter from './routes/terms/index';
import { defaultLimiter } from './middlewares/security/rateLimitMiddleware';
import {
  errorHandler,
  notFoundHandler,
} from './middlewares/error/errorHandler';

// connect-redis v6.1.3 Î∞©Ïãù
import connectRedis from 'connect-redis';
const RedisStore = connectRedis(session);

// Redis ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ import
import {
  redisClient,
  connectRedis as connectRedisClient,
  disconnectRedis,
} from './config/redis/redisClient';

const app = express();
import * as http from 'http';
// ...
const httpServer = http.createServer(app);
let chatSocketServer: ChatSocketServer | null = null;

app.use((req, res, next) => {
  // Track active connections
  activeConnectionsGauge.inc();

  const end = httpRequestDurationMicroseconds.startTimer();
  res.on('finish', () => {
    const route = req.route ? req.route.path : req.path;
    httpRequestCounter.inc({
      method: req.method,
      route,
      status: res.statusCode,
    });
    end({ method: req.method, route, status: res.statusCode });

    // Track errors
    if (res.statusCode >= 400) {
      httpErrorCounter.inc({
        method: req.method,
        route,
        status: res.statusCode,
      });
    }

    // Decrease active connections
    activeConnectionsGauge.dec();
  });

  res.on('close', () => {
    activeConnectionsGauge.dec();
  });

  next();
});

// Prometheus metrics endpoint
app.get('/metrics', async (req, res) => {
  res.setHeader('Content-Type', register.contentType);
  res.end(await register.metrics());
});

// üîß ÌîÑÎ°ùÏãú Ïã†Î¢∞ ÏÑ§Ï†ï (ÌîÑÎ°úÎçïÏÖò ÌôòÍ≤ΩÏóêÏÑú Î°úÎìúÎ∞∏Îü∞ÏÑú/ÌîÑÎ°ùÏãú Îí§Ïóê ÏûàÏùÑ Îïå)
app.set('trust proxy', 1);

// Î≥¥Ïïà Ìó§Îçî ÏÑ§Ï†ï
app.use(
  helmet({
    contentSecurityPolicy: {
      directives: {
        defaultSrc: ["'self'"],
        scriptSrc: [
          "'self'",
          "'unsafe-inline'", // Apollo Playground might use inline scripts
          'https://cdn.jsdelivr.net',
          'https://apollo-server-landing-page.cdn.apollographql.com',
        ],
        styleSrc: [
          "'self'",
          "'unsafe-inline'", // UI ÎùºÏù¥Î∏åÎü¨Î¶¨ Ìò∏ÌôòÏÑ±ÏùÑ ÏúÑÌï¥ ÏûÑÏãú ÌóàÏö©, Apollo PlaygroundÎèÑ ÌïÑÏöî
          'https://cdn.jsdelivr.net',
          'https://apollo-server-landing-page.cdn.apollographql.com',
        ],
        imgSrc: ["'self'", 'data:', 'https:'],
        connectSrc: [
          "'self'",
          'https://appleid.apple.com',
          'https://accounts.google.com',
          'https://oauth2.googleapis.com',
          'https://apollo-server-landing-page.cdn.apollographql.com',
        ],
        frameAncestors: ["'self'"], // ÌÅ¥Î¶≠Ïû¨ÌÇπ Î∞©ÏßÄ
        objectSrc: ["'none'"], // ÌîåÎü¨Í∑∏Ïù∏ Î°úÎìú Ï∞®Îã®
        // Only upgrade in production; omit in dev to prevent local HTTP breakage
        ...(isProduction() ? { upgradeInsecureRequests: [] } : {}),
        reportUri: isProduction() ? ['/csp-report'] : [], // Add CSP reporting endpoint
      },
    },
    strictTransportSecurity: isProduction()
      ? {
          maxAge: 31536000, // 1ÎÖÑ
          includeSubDomains: true,
          preload: true,
        }
      : false,
    // Prefer CSP's frame-ancestors. If you need XFO, keep it consistent with CSP:
    frameguard: { action: 'sameorigin' },
  }),
);

// ÌôòÍ≤ΩÎ≥Ñ Î°úÍ∑∏ Ìè¨Îß∑ ÏÑ§Ï†ï
const logFormat = isDevelopment() ? 'dev' : 'combined';
app.use(morgan(logFormat, { stream }));

// CORS ÏÑ§Ï†ï (ÌôòÍ≤ΩÎ≥Ñ)
app.use(
  cors({
    origin: isDevelopment() ? '*' : env.FRONTEND_URL,
    credentials: isDevelopment() ? false : true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization'],
  }),
);

// Redis Ïù¥Î≤§Ìä∏ Ìï∏Îì§ÎßÅ (Prometheus Î©îÌä∏Î¶≠ Ï∂îÍ∞Ä)
redisClient.on('connect', () => {
  redisConnectionGauge.set(1);
});
redisClient.on('error', () => {
  redisConnectionGauge.set(0);
});
redisClient.on('end', () => {
  redisConnectionGauge.set(0);
});

// JSON ÌååÏã± ÎØ∏Îì§Ïõ®Ïñ¥
app.use(
  express.json({
    limit: '10mb',
    verify: (req: express.Request, res: express.Response, buf: Buffer) => {
      try {
        JSON.parse(buf.toString());
      } catch (e) {
        const error = new Error('ÏûòÎ™ªÎêú JSON ÌòïÏãùÏûÖÎãàÎã§.') as Error & {
          status?: number;
          type?: string;
        };
        error.status = 400;
        error.type = 'entity.parse.failed';
        throw error;
      }
    },
  }),
);
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Î≥¥Ïïà ÎØ∏Îì§Ïõ®Ïñ¥ Ï†ÅÏö©
app.use(mongoSanitize());

// XSS Î∞©Ïñ¥ ÎØ∏Îì§Ïõ®Ïñ¥ (sanitize-html ÏÇ¨Ïö©)
const sanitizeInput = (input: unknown): unknown => {
  if (typeof input === 'string') {
    return sanitizeHtml(input, {
      allowedTags: [], // Î™®Îì† HTML ÌÉúÍ∑∏ Ï†úÍ±∞
      allowedAttributes: {}, // Î™®Îì† HTML ÏÜçÏÑ± Ï†úÍ±∞
    });
  }
  if (Array.isArray(input)) {
    return input.map((item) => sanitizeInput(item));
  }
  if (typeof input === 'object' && input !== null) {
    const sanitizedObject: { [key: string]: unknown } = {};
    for (const key in input) {
      if (Object.prototype.hasOwnProperty.call(input, key)) {
        sanitizedObject[key] = sanitizeInput(
          (input as Record<string, unknown>)[key],
        );
      }
    }
    return sanitizedObject;
  }
  return input;
};

app.use((req, res, next) => {
  if (req.body) {
    req.body = sanitizeInput(req.body);
  }
  // req.query, req.params Îì±ÎèÑ ÌïÑÏöîÏóê Îî∞Îùº sanitizeInput Ï†ÅÏö© Í∞ÄÎä•
  next();
});
app.use(hpp());

// Ï†ïÏ†Å ÌååÏùº ÏÑúÎπô
app.use(express.static('public'));

// ÏÑ∏ÏÖò ÎØ∏Îì§Ïõ®Ïñ¥ ÏÑ§Ï†ï Ìï®Ïàò (Redis Ïó∞Í≤∞ ÌõÑ Ìò∏Ï∂ú)
const setupSessionMiddleware = (useRedis: boolean) => {
  const sessionConfig: session.SessionOptions = {
    secret: env.SESSION_SECRET,
    resave: false,
    saveUninitialized: false,
    rolling: true,
    cookie: {
      secure: isProduction() || env.COOKIE_SAMESITE === 'none',
      httpOnly: true,
      maxAge: parseInt(env.SESSION_MAX_AGE),
      sameSite: env.COOKIE_SAMESITE,
      domain: env.COOKIE_DOMAIN || undefined,
    },
    name: 'app.session.id',
  };

  if (useRedis && redisClient.isOpen) {
    sessionConfig.store = new RedisStore({
      client: redisClient,
      prefix: 'app:sess:',
    });
    logger.info('‚úÖ Session store: Redis');
  } else {
    logger.warn('‚ö†Ô∏è Session store: Memory (sessions will not persist across restarts)');
  }

  app.use(session(sessionConfig));

  // PASSPORT Ï¥àÍ∏∞Ìôî (ÏÑ∏ÏÖò ÏÑ§Ï†ï ÌõÑ)
  app.use(passport.initialize());
  app.use(passport.session());
};

// Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÏÉÅÌÉú Ï∂îÏ†Å
let isUserDBConnected = false;
let isConcertDBConnected = false;
let isArticleDBConnected = false;
let isChatDBConnected = false;
let reportService: ReportService;
let concertStatusScheduler: ConcertStatusScheduler | null = null;

// ü©∫ Ìó¨Ïä§Ï≤¥ÌÅ¨ ÏóîÎìúÌè¨Ïù∏Ìä∏Îì§ (Ïù∏Ï¶ù ÏóÜÏùå - K8s/Î°úÎìúÎ∞∏Îü∞ÏÑúÏö©)
// Liveness Probe: Îã®Ïàú ÏÉùÏ°¥ ÌôïÏù∏
app.get('/health/liveness', (req: express.Request, res: express.Response) => {
  res.status(200).json({
    status: 'alive',
    timestamp: new Date().toISOString(),
    uptime: Math.floor(process.uptime()),
  });
});

// Readiness Probe: ÏÑúÎπÑÏä§ Ï§ÄÎπÑ ÏÉÅÌÉú ÌôïÏù∏
app.get('/health/readiness', (req: express.Request, res: express.Response) => {
  // RedisÎäî ÏÑ†ÌÉùÏ†Å - ÌïÑÏàò ÏÑúÎπÑÏä§Îßå Ï≤¥ÌÅ¨
  const allServicesReady =
    isUserDBConnected &&
    isConcertDBConnected &&
    isArticleDBConnected &&
    isChatDBConnected;

  const serviceStatus = {
    userDB: isUserDBConnected,
    concertDB: isConcertDBConnected,
    articleDB: isArticleDBConnected,
    chatDB: isChatDBConnected,
    redis: redisClient?.isOpen || false, // Ï†ïÎ≥¥ÏÑ± - ÌïÑÏàò ÏïÑÎãò
  };

  if (allServicesReady) {
    res.status(200).json({
      status: 'ready',
      timestamp: new Date().toISOString(),
      services: serviceStatus,
    });
  } else {
    res.status(503).json({
      status: 'not ready',
      timestamp: new Date().toISOString(),
      services: serviceStatus,
    });
  }
});

// ÏùºÎ∞ò Ìó¨Ïä§Ï≤¥ÌÅ¨ (Ìò∏ÌôòÏÑ±)
app.get('/health', (req: express.Request, res: express.Response) => {
  res.status(200).json({
    status: 'healthy',
    timestamp: new Date().toISOString(),
    uptime: Math.floor(process.uptime()),
    version: process.env.npm_package_version || '1.0.0',
    environment: env.NODE_ENV,
    services: {
      userDB: isUserDBConnected,
      concertDB: isConcertDBConnected,
      articleDB: isArticleDBConnected,
      chatDB: isChatDBConnected,
      redis: redisClient?.isOpen || false,
    },
  });
});

// Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÏÉÅÌÉú ÌôïÏù∏ ÎØ∏Îì§Ïõ®Ïñ¥
app.use(
  (req: express.Request, res: express.Response, next: express.NextFunction) => {
    // Ìó¨Ïä§Ï≤¥ÌÅ¨Îäî Ìï≠ÏÉÅ ÌÜµÍ≥º
    if (req.path.startsWith('/health')) {
      return next();
    }

    if (req.path.startsWith('/auth') && !isUserDBConnected) {
      return res.status(503).json({
        message: 'ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞Ïù¥ Ï§ÄÎπÑÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.',
      });
    }
    if (req.path.startsWith('/concert') && !isConcertDBConnected) {
      return res.status(503).json({
        message: 'ÏΩòÏÑúÌä∏ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞Ïù¥ Ï§ÄÎπÑÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.',
      });
    }
    if (req.path.startsWith('/article') && !isArticleDBConnected) {
      return res.status(503).json({
        message: 'Í≤åÏãúÍ∏Ä Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞Ïù¥ Ï§ÄÎπÑÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.',
      });
    }
    if (req.path.startsWith('/chat') && !isChatDBConnected) {
      return res.status(503).json({
        message: 'Ï±ÑÌåÖ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞Ïù¥ Ï§ÄÎπÑÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.',
      });
    }
    next();
  },
);

// Swagger ÏÑ§Ï†ï
app.use(
  '/api-docs',
  swaggerUi.serve,
  swaggerUi.setup(swaggerSpec, swaggerUiOptions),
);

// Í∏∞Î≥∏ ÎùºÏö∞Ìä∏
app.get('/', (req: express.Request, res: express.Response) => {
  res.json({
    message: 'Stagelives API',
    version: '1.0.0',
    environment: env.NODE_ENV,
    endpoints: {
      documentation: '/api-docs',
      'health-liveness': '/health/liveness',
      'health-readiness': '/health/readiness',
      'health-general': '/health',
      'health-detailed': '/health/*',
      auth: '/auth',
      concerts: '/concert',
      articles: '/article',
      chat: '/chat',
    },
    features: {
      authenticationSkip: shouldSkipAuth(),
      adminEmails: env.ADMIN_EMAILS.length,
      secureMode: isProduction(),
    },
    timestamp: new Date().toISOString(),
  });
});

// Ï†ïÏ†Å ÎùºÏö∞ÌÑ∞ Ïó∞Í≤∞
app.use('/health', healthRouter);
app.use('/swagger-json', swaggerRouter);
app.use('/terms', termsRouter);
// Í∏∞Î≥∏ Rate Limiter Ï†ÅÏö©
app.use(defaultLimiter);
app.use('/auth', authRouter);
app.use('/concert', concertRouter);

// CSP Violation Report Endpoint
app.post(
  '/csp-report',
  express.json({ type: 'application/csp-report' }),
  (req, res) => {
    if (req.body) {
      logger.warn('CSP Violation:', req.body['csp-report']);
    } else {
      logger.warn('CSP Violation: No report data received.');
    }
    res.status(204).end(); // Respond with No Content
  },
);

// Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî Ìï®Ïàò
const initializeDatabases = async (): Promise<void> => {
  try {
    logger.info('üîå Connecting to User Database...');
    await connectUserDB();
    isUserDBConnected = true;
    dbConnectionGauge.set({ database: 'user' }, 1);
    logger.info('‚úÖ User Database connected');

    logger.info('üîå Connecting to Concert Database...');
    const concertDB = await connectConcertDB();
    initializeConcertModel(concertDB);
    isConcertDBConnected = true;
    dbConnectionGauge.set({ database: 'concert' }, 1);
    logger.info('‚úÖ Concert Database connected and models initialized');

    logger.info('üîå Initializing Article Database...');
    initializeAllArticleModels(concertDB);
    isArticleDBConnected = true;
    dbConnectionGauge.set({ database: 'article' }, 1);
    logger.info('‚úÖ Article Database initialized and models ready');

    // Initialize ReportService
    reportService = new ReportService(concertDB);
    logger.info('‚úÖ Report Service initialized');

    logger.info('üîå Initializing Chat Database...');
    initializeChatModels();
    isChatDBConnected = true;
    dbConnectionGauge.set({ database: 'chat' }, 1);
    logger.info('‚úÖ Chat Database initialized and models ready');

    // Initialize Concert Status Scheduler
    logger.info('üîå Initializing Concert Status Scheduler...');
    concertStatusScheduler = new ConcertStatusScheduler(concertDB);
    concertStatusScheduler.start();
    logger.info('‚úÖ Concert Status Scheduler started');
  } catch (error) {
    logger.error('‚ùå Database initialization failed:', { error });
    // Set all database connection gauges to 0 on failure
    dbConnectionGauge.set({ database: 'user' }, isUserDBConnected ? 1 : 0);
    dbConnectionGauge.set(
      { database: 'concert' },
      isConcertDBConnected ? 1 : 0,
    );
    dbConnectionGauge.set(
      { database: 'article' },
      isArticleDBConnected ? 1 : 0,
    );
    dbConnectionGauge.set({ database: 'chat' }, isChatDBConnected ? 1 : 0);
    throw error;
  }
};

// Ïö∞ÏïÑÌïú Ï¢ÖÎ£å Ï≤òÎ¶¨
const gracefulShutdown = async (signal: string): Promise<void> => {
  logger.info(`\nüõë ${signal} received. Starting graceful shutdown...`);

  try {
    // HTTP ÏÑúÎ≤Ñ Ï¢ÖÎ£å
    if (httpServer.listening) {
      await new Promise<void>((resolve) => {
        httpServer.close(() => {
          logger.info('‚úÖ HTTP server closed');
          resolve();
        });
      });
    }

    // Socket.IO Ï¢ÖÎ£å
    if (chatSocketServer) {
      logger.info('üîå Closing Socket.IO server...');
      // Socket.IO ÏÑúÎ≤Ñ Ï¢ÖÎ£å Î°úÏßÅÏù¥ ÏûàÎã§Î©¥ Ïó¨Í∏∞Ïóê Ï∂îÍ∞Ä
      chatSocketServer = null;
      logger.info('‚úÖ Socket.IO server closed');
    }

    // Concert Status Scheduler Ï¢ÖÎ£å
    if (concertStatusScheduler) {
      logger.info('üîå Stopping Concert Status Scheduler...');
      concertStatusScheduler.stop();
      concertStatusScheduler = null;
      logger.info('‚úÖ Concert Status Scheduler stopped');
    }

    // Redis Ïó∞Í≤∞ Ï¢ÖÎ£å
    await disconnectRedis();

    // MongoDB Ïó∞Í≤∞ Ï¢ÖÎ£å
    await disconnectUserDB();
    logger.info('‚úÖ User MongoDB disconnected');

    logger.info('üëã Graceful shutdown completed');
    process.exit(0);
  } catch (error) {
    logger.error('‚ùå Graceful shutdown failed', { error });
    process.exit(1);
  }
};

// ÏÑúÎ≤Ñ ÏãúÏûë Ìï®Ïàò
const startServer = async (): Promise<void> => {
  try {
    // Redis Ïó∞Í≤∞ ÏãúÎèÑ
    const isRedisConnected = await connectRedisClient();

    // ÏÑ∏ÏÖò ÎØ∏Îì§Ïõ®Ïñ¥ ÏÑ§Ï†ï (Redis Ïó∞Í≤∞ ÏÉÅÌÉúÏóê Îî∞Îùº)
    setupSessionMiddleware(isRedisConnected);

    // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî
    await initializeDatabases();

    // Passport ÏÑ§Ï†ï (DB Ïó∞Í≤∞ ÌõÑ)
    logger.info('üîå Configuring Passport...');
    configurePassport(passport);
    logger.info('‚úÖ Passport configured');

    // ÎèôÏ†Å ÎùºÏö∞ÌÑ∞ Î°úÎìú
    logger.info('üîå Loading Article routes...');
    const { default: articleRouter } = await import('./routes/article/index');
    app.use('/article', articleRouter);
    logger.info('‚úÖ Article routes loaded and connected');

    logger.info('üîå Loading Chat routes...');
    const { default: chatRouter } = await import('./routes/chat/index');
    app.use('/chat', chatRouter);
    logger.info('‚úÖ Chat routes loaded and connected');

    // Setup Apollo Server
    logger.info('üîå Setting up Apollo Server...');
    await setupApolloServer(app, httpServer, reportService);
    logger.info('‚úÖ Apollo Server setup complete');

    // Socket.IO Ï¥àÍ∏∞Ìôî
    logger.info('üîå Initializing Socket.IO server...');
    chatSocketServer = new ChatSocketServer(httpServer);
    logger.info('‚úÖ Socket.IO server initialized');

    // 404 Ìï∏Îì§Îü¨ (Î™®Îì† ÎùºÏö∞ÌÑ∞ Îí§Ïóê, ÏóêÎü¨ Ìï∏Îì§Îü¨ ÏïûÏóê ÏúÑÏπò)
    app.use('*', notFoundHandler);

    // Ï†ÑÏó≠ ÏóêÎü¨ Ìï∏Îì§Îü¨ (Í∞ÄÏû• ÎßàÏßÄÎßâÏóê ÏúÑÏπò)
    app.use(errorHandler);

    // HTTP ÏÑúÎ≤Ñ ÏãúÏûë
    const PORT = parseInt(env.PORT);
    httpServer.listen(PORT, () => {
      logger.info('üéâ ================================');
      logger.info(
        `üöÄ Stagelives API Server running at http://localhost:${PORT}`,
      );
      logger.info(`üìö API Documentation: http://localhost:${PORT}/api-docs`);
      logger.info(
        `ü©∫ Health Check (Liveness): http://localhost:${PORT}/health/liveness`,
      );
      logger.info(
        `ü©∫ Health Check (Readiness): http://localhost:${PORT}/health/readiness`,
      );
      logger.info(`üîê Auth API: http://localhost:${PORT}/auth`);
      logger.info(`üéµ Concert API: http://localhost:${PORT}/concert`);
      logger.info(`üìù Article API: http://localhost:${PORT}/article`);
      logger.info(`üí¨ Chat API: http://localhost:${PORT}/chat`);
      logger.info(`üîå Socket.IO: http://localhost:${PORT}/socket.io/`);
      logger.info(`üíæ Database: MongoDB Native Driver`);
      logger.info(`üóÑÔ∏è  Session Store: Redis`);
      logger.info(
        `üîí Security: ${isProduction() ? 'Production Mode' : 'Development Mode'}`,
      );
      logger.info('üéâ ================================');
    });
  } catch (err) {
    logger.error('‚ùå Startup failed', { error: err });
    process.exit(1);
  }
};

// üö® Ï†ÑÏó≠ Ïò§Î•ò Ï≤òÎ¶¨ (MUST)
process.on('unhandledRejection', (reason) => {
  logger.error('üí• UnhandledRejection:', { reason });
  process.exit(1);
});

process.on('uncaughtException', (err) => {
  logger.error('üí• UncaughtException:', { error: err, stack: err?.stack });
  process.exit(1);
});

// üõë Í∑∏Î†àÏù¥Ïä§ÌíÄ ÏÖßÎã§Ïö¥ (MUST)
process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
process.on('SIGINT', () => gracefulShutdown('SIGINT'));

// üöÄ ÏÑúÎ≤Ñ ÏãúÏûë
try {
  startServer().catch((error) => {
    logger.error('‚ùå Failed to start server:', { error });
    process.exit(1);
  });
} catch (error) {
  logger.error('‚ùå Caught an error during server startup:', { error });
  process.exit(1);
}

export { redisClient, chatSocketServer };
