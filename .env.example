# ==============================================
# LiveLink Backend Environment Variables
# ==============================================
# 이 파일을 복사하여 .env 파일을 생성하고 실제 값으로 변경하세요
# cp .env.example .env

# ==============================================
# 🏗️ APPLICATION SETTINGS
# ==============================================

# 애플리케이션 실행 환경 (development, production, test)
NODE_ENV=development

# 서버 포트 번호
PORT=3000

# ==============================================
# 🔐 SECURITY & SESSION
# ==============================================

# 세션 암호화를 위한 비밀키 (32자 이상의 랜덤 문자열 필수!)
# 생성 방법: openssl rand -base64 32
SESSION_SECRET=your-super-secret-session-key-minimum-32-characters

# 📱 플랫폼별 세션 만료 시간 (밀리초)
# X-Platform 헤더로 구분: APP은 30일, WEB은 1일 유지
# 세션 정책: 플랫폼별 1개씩 유지 (웹 1개 + 앱 1개 = 총 최대 2개)
SESSION_MAX_AGE_APP=2592000000   # 30일 - APP 플랫폼 (X-Platform: app)
SESSION_MAX_AGE_WEB=86400000     # 1일 - WEB 플랫폼 (X-Platform: web)

# 브루트포스 보호 설정
# 로그인 시도 최대 횟수 (기본값: 10)
BRUTE_FORCE_MAX_ATTEMPTS=10
# 차단 기간 (초, 기본값: 1800초 = 30분)
BRUTE_FORCE_BLOCK_DURATION=1800

# 쿠키 도메인 (선택사항, 설정 시 해당 도메인으로 제한)
# 예: .yourdomain.com (서브도메인 포함 시 앞에 점)
COOKIE_DOMAIN=

# SameSite 정책 (lax, strict, none, 기본값: lax)
# 'none' 사용 시 secure: true 필수
COOKIE_SAMESITE=lax

# ==============================================
# 📊 MONITORING (Grafana & Prometheus)
# ==============================================

# Grafana 관리자 계정 (기본값: admin/admin)
# 프로덕션 환경에서는 반드시 변경하세요!
GRAFANA_ADMIN_USER=admin
GRAFANA_ADMIN_PASSWORD=admin

# ==============================================
# 🕐 SCHEDULER (스케줄러 설정)
# ==============================================

# 콘서트 상태 자동 업데이트 체크 간격 (밀리초 단위)
# 기본값: 1800000 (30분)
# 예시:
#   - 10분: 600000
#   - 30분: 1800000
#   - 1시간: 3600000
CONCERT_STATUS_CHECK_INTERVAL=1800000

# ==============================================
# 🗄️ DATABASE (MongoDB)
# ==============================================

# MongoDB 인증 정보 (Docker Compose에서 사용)
# 로컬 개발 시에는 인증 없이 사용 가능하지만, 운영에서는 필수!
MONGO_ROOT_USERNAME=admin
MONGO_ROOT_PASSWORD=changeme

# MongoDB 연결 URI (데이터베이스명 포함)
# 로컬 (인증 없음): mongodb://localhost:27017/livelink
# 로컬 (인증 사용): mongodb://admin:changeme@localhost:27017/livelink?authSource=admin
# Docker Compose: mongodb://admin:changeme@mongo:27017/livelink?authSource=admin
# Atlas: mongodb+srv://username:password@cluster.mongodb.net/livelink
MONGO_URI=mongodb://localhost:27017/livelink

# ==============================================
# 📦 REDIS (세션 저장소)
# ==============================================

# Redis 비밀번호 (Docker Compose에서 사용)
# 로컬 개발 시에는 비밀번호 없이 사용 가능하지만, 운영에서는 필수!
REDIS_PASSWORD=changeme

# Redis 연결 URL
# 로컬 (인증 없음): redis://localhost:6379
# 로컬 (인증 사용): redis://:changeme@localhost:6379
# Docker Compose: redis://:changeme@redis:6379
# 클라우드: redis://username:password@host:port
REDIS_URL=redis://localhost:6379

# ==============================================
# 🌐 CORS & FRONTEND
# ==============================================

# 프론트엔드 도메인 (CORS 설정용 - 프로덕션에서 사용)
# 개발: http://localhost:3000
# 운영: https://your-frontend-domain.com
FRONTEND_URL=http://localhost:3000

# CORS 허용 도메인 목록 (개발 환경에서 사용, 쉼표로 구분)
# 보안 강화: 개발 환경에서도 특정 도메인만 허용하여 CSRF 공격 방지
# 예: http://localhost:3000,http://localhost:3001,http://127.0.0.1:3000
# 프로덕션에서는 FRONTEND_URL만 사용됩니다
CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001

# ==============================================
# 📧 EMAIL SERVICE (이메일 인증용)
# ==============================================

# 이메일 서비스 사용자 계정
EMAIL_USER=your-email@gmail.com

# 이메일 서비스 비밀번호 (Gmail 앱 비밀번호 권장)
EMAIL_PASS=your-app-specific-password

# ==============================================
# 👑 ADMIN SETTINGS
# ==============================================

# 관리자 이메일 목록 (쉼표로 구분)
# 예: admin1@example.com,admin2@example.com
ADMIN_EMAILS=admin@yourdomain.com,superadmin@yourdomain.com

# ==============================================
# 🐛 DEVELOPMENT & DEBUGGING
# ==============================================

# 로그 레벨 (error, warn, info, verbose, debug)
LOG_LEVEL=info

# 인증 스킵 옵션 (개발/테스트용만 - 운영환경에서는 절대 true 금지!)
SKIP_AUTH=false

# ==============================================
# 🚦 API RATE LIMITING
# ==============================================
# 단위: 밀리초(ms)

# 기본 제한 (15분당 100회)
API_LIMIT_DEFAULT_WINDOW_MS=900000
API_LIMIT_DEFAULT_MAX=100

# 엄격한 제한 (15분당 50회)
API_LIMIT_STRICT_WINDOW_MS=900000
API_LIMIT_STRICT_MAX=50

# 완화된 제한 (60분당 500회)
API_LIMIT_RELAXED_WINDOW_MS=3600000
API_LIMIT_RELAXED_MAX=500

# 로그인 제한 (15분당 10회)
API_LIMIT_LOGIN_WINDOW_MS=900000
API_LIMIT_LOGIN_MAX=10

# 회원가입 제한 (60분당 10회)
API_LIMIT_SIGNUP_WINDOW_MS=3600000
API_LIMIT_SIGNUP_MAX=10

# ==============================================
# 📝 EXAMPLE VALUES FOR QUICK START
# ==============================================

# 개발환경 빠른 시작용 설정 예시:
# NODE_ENV=development
# PORT=3000
# SESSION_SECRET=dev-secret-key-for-local-development-32chars
# MONGO_URI=mongodb://localhost:27017/livelink
# REDIS_URL=redis://localhost:6379
# FRONTEND_URL=http://localhost:3000
# EMAIL_USER=your-gmail@gmail.com
# EMAIL_PASS=your-gmail-app-password
# ADMIN_EMAILS=admin@yourdomain.com
# SKIP_AUTH=false

# ==============================================
# 🚀 PRODUCTION DEPLOYMENT NOTES
# ==============================================

# Docker Compose 예시:
# version: '3.8'
# services:
#   app:
#     build: .
#     ports:
#       - "3000:3000"
#     environment:
#       - NODE_ENV=production
#       - PORT=3000
#       - MONGO_URI=mongodb://mongo:27017/livelink
#       - REDIS_URL=redis://redis:6379
#       - SESSION_SECRET=${SESSION_SECRET}
#       - ADMIN_EMAILS=${ADMIN_EMAILS}
#       - EMAIL_USER=${EMAIL_USER}
#       - EMAIL_PASS=${EMAIL_PASS}
#     volumes:
#       - ./logs:/app/logs  # 로그 볼륨 마운트
#     depends_on:
#       - mongo
#       - redis
#
#   mongo:
#     image: mongo:5
#     volumes:
#       - mongo_data:/data/db
#
#   redis:
#     image: redis:7-alpine
#     volumes:
#       - redis_data:/data

# PM2 Ecosystem 예시:
# module.exports = {
#   apps: [{
#     name: 'livelink-api',
#     script: './dist/app.js',
#     instances: 'max',
#     exec_mode: 'cluster',
#     env_production: {
#       NODE_ENV: 'production',
#       PORT: 3000,
#       LOG_LEVEL: 'info'
#     },
#     log_file: './logs/combined.log',
#     out_file: './logs/out.log',
#     error_file: './logs/error.log'
#   }]
# };

# Kubernetes ConfigMap 예시:
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: livelink-config
# data:
#   NODE_ENV: "production"
#   PORT: "3000"
#   LOG_LEVEL: "info"
#   FRONTEND_URL: "https://your-frontend-domain.com"
# ---
# # Secret는 별도 관리
# apiVersion: v1
# kind: Secret
# metadata:
#   name: livelink-secrets
# type: Opaque
# stringData:
#   SESSION_SECRET: "your-production-session-secret"
#   MONGO_URI: "mongodb+srv://user:pass@cluster.mongodb.net/livelink"
#   REDIS_URL: "redis://redis-service:6379"
#   EMAIL_USER: "noreply@yourdomain.com"
#   EMAIL_PASS: "your-email-password"
#   ADMIN_EMAILS: "admin@yourdomain.com,manager@yourdomain.com"

# ==============================================
#  Google OAuth (OAUTH)
# ==============================================

# Google OAuth 2.0
GOOGLE_CLIENT_ID=your-google-client-id
GOOGLE_CLIENT_SECRET=your-google-client-secret

# ==============================================
#  Apple OAuth (OAUTH)
# ==============================================

# Apple OAuth 2.0
APPLE_CLIENT_ID=your-apple-client-id
APPLE_TEAM_ID=your-apple-team-id
APPLE_KEY_ID=your-apple-key-id
APPLE_PRIVATE_KEY="your-apple-private-key"

# ==============================================
# 🔔 FIREBASE (Push Notifications)
# ==============================================

# Firebase Admin SDK 설정 (FCM 푸시 알림용)
# 옵션 1: 서비스 계정 JSON 파일 경로 사용 (권장)
# FIREBASE_SERVICE_ACCOUNT_PATH=/path/to/serviceAccountKey.json

# 옵션 2: 환경변수로 직접 설정 (서비스 계정 JSON 파일이 없을 경우)
# Firebase 프로젝트 ID
FIREBASE_PROJECT_ID=your-firebase-project-id

# Firebase 클라이언트 이메일 (서비스 계정 이메일)
# 예: firebase-adminsdk-xxxxx@your-project.iam.gserviceaccount.com
FIREBASE_CLIENT_EMAIL=firebase-adminsdk@your-project.iam.gserviceaccount.com

# Firebase 개인키 (Private Key)
# 개행 문자는 \n으로 이스케이프하여 입력하세요
# 예: "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBg...\n-----END PRIVATE KEY-----\n"
FIREBASE_PRIVATE_KEY="-----BEGIN PRIVATE KEY-----\nYOUR_PRIVATE_KEY_HERE\n-----END PRIVATE KEY-----\n"

# ==============================================
# 🔧 MAINTENANCE MODE (유지보수 모드)
# ==============================================

# 유지보수 모드 활성화 (true/false)
# true로 설정하면 점검 페이지가 표시됩니다
# 또는 프로젝트 루트에 maintenance.lock 파일을 생성하여 활성화할 수 있습니다
MAINTENANCE_MODE=false

# 유지보수 모드 중에도 접근 가능한 관리자 IP 주소 (쉼표로 구분)
# 예: 127.0.0.1,::1,192.168.1.100
# 로컬호스트: 127.0.0.1 (IPv4), ::1 (IPv6)
MAINTENANCE_ALLOWED_IPS=127.0.0.1,::1
