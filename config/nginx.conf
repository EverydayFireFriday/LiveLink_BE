# /etc/nginx/nginx.conf

user nginx;
worker_processes auto;

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 4096;  # 프로덕션 환경에 맞게 증가
    use epoll;  # Linux에서 효율적인 이벤트 모델
    multi_accept on;  # 여러 연결을 동시에 수락
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;  # Nginx 버전 숨기기 (보안)

    # 요청 크기 제한 (DoS 방지)
    client_max_body_size 10m;  # 최대 업로드 크기
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 16k;

    # Timeout 설정
    client_body_timeout 12;
    client_header_timeout 12;
    send_timeout 10;

    # Gzip 압축 설정
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript
               application/json application/javascript application/xml+rss
               application/rss+xml font/truetype font/opentype
               application/vnd.ms-fontobject image/svg+xml;
    gzip_disable "msie6";

    # Rate limiting zones (DDoS 방지)
    limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=30r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;
    limit_conn_zone $binary_remote_addr zone=addr:10m;

    # Proxy 버퍼 설정
    proxy_buffering on;
    proxy_buffer_size 4k;
    proxy_buffers 8 4k;
    proxy_busy_buffers_size 8k;

    # Upstream configuration for horizontal scaling
    # 🚀 여러 서버 인스턴스를 추가하여 로드 밸런싱 구성
    upstream app_backend {
        # ip_hash: 같은 클라이언트 IP는 항상 같은 서버로 라우팅 (sticky session)
        # Socket.IO Redis adapter를 사용하면 ip_hash 없이도 동작하지만,
        # 성능 최적화를 위해 같은 서버로 연결하는 것이 좋습니다.
        ip_hash;

        # 서버 인스턴스 목록 (필요에 따라 추가/제거)
        server app:3000 max_fails=3 fail_timeout=30s;
        # server app2:3000 max_fails=3 fail_timeout=30s;  # 추가 서버 예시
        # server app3:3000 max_fails=3 fail_timeout=30s;  # 추가 서버 예시

        # keepalive connections to upstream servers
        keepalive 32;
    }

    server {
        listen 80;
        server_name localhost; # Changed for local development

        # Security Headers (XSS, Clickjacking, MIME 방지)
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        # CSP는 프론트엔드 설정에 따라 조정 필요
        # add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';" always;

        # Rate limiting 적용
        limit_req zone=general burst=20 nodelay;
        limit_conn addr 10;

        location / {
            proxy_pass http://app_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_read_timeout 86400;

            # Connection header for keepalive
            proxy_set_header Connection "";

            # API 요청에 대한 rate limiting
            limit_req zone=api burst=50 nodelay;
        }

        # WebSocket support for chat with sticky session
        location /socket.io/ {
            proxy_pass http://app_backend/socket.io/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket timeout
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
        }

    }

    # For production, uncomment the following block and configure SSL certificates.
    # This setup assumes you are using Certbot for SSL certificate management.
    # server {
    #     listen 443 ssl http2;
    #     server_name your_domain.com; # Replace with your actual domain
    #
    #     # SSL Certificate (Let's Encrypt / Certbot)
    #     ssl_certificate /etc/letsencrypt/live/your_domain.com/fullchain.pem;
    #     ssl_certificate_key /etc/letsencrypt/live/your_domain.com/privkey.pem;
    #
    #     # SSL 보안 설정 (Modern configuration)
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
    #     ssl_prefer_server_ciphers off;
    #     ssl_session_cache shared:SSL:10m;
    #     ssl_session_timeout 10m;
    #     ssl_session_tickets off;
    #     ssl_stapling on;
    #     ssl_stapling_verify on;
    #     ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    #
    #     # Security Headers (HTTPS 전용)
    #     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    #     add_header X-Frame-Options "SAMEORIGIN" always;
    #     add_header X-Content-Type-Options "nosniff" always;
    #     add_header X-XSS-Protection "1; mode=block" always;
    #     add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    #     # add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';" always;
    #
    #     # Rate limiting 적용
    #     limit_req zone=general burst=20 nodelay;
    #     limit_conn addr 10;
    #
    #     location / {
    #         proxy_pass http://app_backend;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #         proxy_http_version 1.1;
    #         proxy_set_header Upgrade $http_upgrade;
    #         proxy_set_header Connection "upgrade";
    #         proxy_read_timeout 86400;
    #         proxy_set_header Connection "";
    #
    #         # API 요청에 대한 rate limiting
    #         limit_req zone=api burst=50 nodelay;
    #     }
    #
    #     # Auth endpoints에 더 엄격한 rate limiting
    #     location ~ ^/(auth|login|register|api/v1/auth) {
    #         proxy_pass http://app_backend;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #         limit_req zone=auth burst=10 nodelay;
    #     }
    #
    #     location /socket.io/ {
    #         proxy_pass http://app_backend/socket.io/;
    #         proxy_http_version 1.1;
    #         proxy_set_header Upgrade $http_upgrade;
    #         proxy_set_header Connection "upgrade";
    #         proxy_set_header Host $host;
    #         proxy_cache_bypass $http_upgrade;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #         proxy_read_timeout 86400;
    #         proxy_send_timeout 86400;
    #     }
    # }
    #
    # # HTTP to HTTPS redirect
    # server {
    #     listen 80;
    #     server_name your_domain.com;
    #     return 301 https://$server_name$request_uri;
    # }

}
